{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport * as Yup from \"yup\";\nimport CategoryPickerItem from \"../CategoryPickerItem\";\nimport * as Location from \"expo-location\";\nimport { AppForm as Form, AppFormField as FormField, AppFormPicker as Picker, SubmitButton } from \"../forms\";\nimport FormImagePicker from \"../forms/FormImagePicker\";\nimport Screen from \"../Screen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar validationSchema = Yup.object().shape({\n  title: Yup.string().required().min(1).label(\"Title\"),\n  price: Yup.number().required().min(1).max(10000).label(\"Price\"),\n  description: Yup.string().label(\"Description\"),\n  category: Yup.object().required().nullable().label(\"Category\"),\n  images: Yup.array().min(1, \"Please, select at least one image.\").max(4, \"Please, select at maximun four images\").label(\"Images\")\n});\nvar categories = [{\n  label: \"Dog\",\n  value: 1\n}, {\n  label: \"Cat\",\n  value: 2\n}, {\n  label: \"Others\",\n  value: 3\n}];\n\nfunction ListingEditScreen() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  var getLocation = function getLocation() {\n    var _await$Location$reque, granted, _await$Location$getLa, _await$Location$getLa2, latitude, longitude;\n\n    return _regeneratorRuntime.async(function getLocation$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n          case 2:\n            _await$Location$reque = _context.sent;\n            granted = _await$Location$reque.granted;\n\n            if (granted) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 6:\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(Location.getLastKnownPositionAsync());\n\n          case 8:\n            _await$Location$getLa = _context.sent;\n            _await$Location$getLa2 = _await$Location$getLa.coords;\n            latitude = _await$Location$getLa2.latitude;\n            longitude = _await$Location$getLa2.longitude;\n            setLocation({\n              latitude: latitude,\n              longitude: longitude\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    getLocation();\n  }, []);\n  return _jsx(Screen, {\n    style: styles.container,\n    children: _jsxs(Form, {\n      initialValues: {\n        title: \"\",\n        description: \"\",\n        category: null,\n        images: []\n      },\n      onSubmit: function onSubmit(values) {\n        return console.log(\"values\");\n      },\n      validationSchema: validationSchema,\n      children: [_jsx(FormImagePicker, {\n        name: \"images\"\n      }), _jsx(FormField, {\n        maxLength: 255,\n        name: \"title\",\n        placeholder: \"Title\"\n      }), _jsx(Picker, {\n        items: categories,\n        name: \"category\",\n        placeholder: \"Category\",\n        PickerItemComponent: CategoryPickerItem,\n        numberOfColumns: 3\n      }), _jsx(FormField, {\n        maxLength: 255,\n        multiline: true,\n        name: \"description\",\n        numberOfLines: 3,\n        placeholder: \"Description\"\n      }), _jsx(SubmitButton, {\n        title: \"Post\",\n        onPress: function onPress(values) {\n          return console.log(\"hola\");\n        }\n      })]\n    })\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    padding: 10\n  }\n});\nexport default ListingEditScreen;","map":{"version":3,"sources":["/Users/joseantoniojuan/Desktop/Universidad/tfg/myApp/app/components/screens/ListingEditScreen.js"],"names":["React","useEffect","useState","Yup","CategoryPickerItem","Location","AppForm","Form","AppFormField","FormField","AppFormPicker","Picker","SubmitButton","FormImagePicker","Screen","validationSchema","object","shape","title","string","required","min","label","price","number","max","description","category","nullable","images","array","categories","value","ListingEditScreen","location","setLocation","getLocation","requestForegroundPermissionsAsync","granted","getLastKnownPositionAsync","coords","latitude","longitude","styles","container","values","console","log","StyleSheet","create","padding"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport * as Yup from \"yup\";\nimport CategoryPickerItem from \"../CategoryPickerItem\";\nimport * as Location from \"expo-location\"\n\nimport {\n  AppForm as Form,\n  AppFormField as FormField,\n  AppFormPicker as Picker,\n  SubmitButton,\n} from \"../forms\";\nimport FormImagePicker from \"../forms/FormImagePicker\";\nimport Screen from \"../Screen\";\n\nconst validationSchema = Yup.object().shape({\n  title: Yup.string().required().min(1).label(\"Title\"),\n  price: Yup.number().required().min(1).max(10000).label(\"Price\"),\n  description: Yup.string().label(\"Description\"),\n  category: Yup.object().required().nullable().label(\"Category\"),\n  images: Yup.array().min(1, \"Please, select at least one image.\").max(4, \"Please, select at maximun four images\").label(\"Images\")\n});\n\nconst categories = [\n  { label: \"Dog\", value: 1 },\n  { label: \"Cat\", value: 2 },\n  { label: \"Others\", value: 3 },\n];\n\nfunction ListingEditScreen() {\n  const [location, setLocation] = useState();\n\n  const getLocation = async () => {\n    const { granted } = await Location.requestForegroundPermissionsAsync()\n    if (!granted) return;\n    const {coords: {latitude, longitude}} = await Location.getLastKnownPositionAsync()\n    setLocation({ latitude, longitude})\n  }\n  useEffect (() => {\n    getLocation()\n  }, [] )\n\n  return (\n    <Screen style={styles.container}>\n      <Form\n        initialValues={{\n          title: \"\",\n          description: \"\",\n          category: null,\n          images: []\n        }}\n        onSubmit={(values) => console.log(\"values\")}\n        validationSchema={validationSchema}\n      >\n        <FormImagePicker name=\"images\" />\n        <FormField maxLength={255} name=\"title\" placeholder=\"Title\" />\n        <Picker items={categories} name=\"category\" placeholder=\"Category\" \n        PickerItemComponent={CategoryPickerItem} \n        numberOfColumns={3}\n        />\n        <FormField\n          maxLength={255}\n          multiline\n          name=\"description\"\n          numberOfLines={3}\n          placeholder=\"Description\"\n        />\n        <SubmitButton title=\"Post\" onPress={(values) => console.log(\"hola\")} />\n      </Form>\n    </Screen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 10,\n  },\n});\nexport default ListingEditScreen;"]},"metadata":{},"sourceType":"module"}